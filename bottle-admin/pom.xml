<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>magic-bottle</artifactId>
    <groupId>com.teorange.magic</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>bottle-admin</artifactId>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <shiro.version>1.5.1</shiro.version>

    <quartz.version>2.3.2</quartz.version>
    <!--wagon plugin 配置-->
    <service-path>/home/robot/server/bottle-admin</service-path>
    <pack-name>${project.artifactId}.jar</pack-name>
    <remote-addr>120.79.140.150:22</remote-addr>
    <remote-username>root</remote-username>
    <remote-passwd>teorange2018*</remote-passwd>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.teorange.magic</groupId>
      <artifactId>bottle-api</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>cn.teorange.framework</groupId>
      <artifactId>spring-boot-starter-axon</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.axonframework</groupId>
          <artifactId>axon-mongo</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>cn.teorange.framework</groupId>
      <artifactId>spring-boot-starter-redis</artifactId>
    </dependency>
    <dependency>
      <groupId>cn.teorange.framework</groupId>
      <artifactId>spring-boot-starter-swagger</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-core</artifactId>
      <version>${shiro.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-spring</artifactId>
      <version>${shiro.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>${quartz.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.mchange</groupId>
          <artifactId>c3p0</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-parameter-names</artifactId>
      <version>2.9.0.pr3</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <version>2.9.0.pr3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi-ooxml</artifactId>
      <version>3.9</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*.*</include>
        </includes>
        <filtering>false</filtering>
      </resource>
    </resources>
    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-ssh</artifactId>
        <version>2.8</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>com.teorange.magic.bottle.admin.Application</mainClass>
          <layout>ZIP</layout>
          <fork>true</fork>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- 跳过单元测试 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>wagon-maven-plugin</artifactId>
        <version>1.0</version>
        <configuration>
          <fromFile>target/${pack-name}</fromFile>
          <url>
            <![CDATA[scp://${remote-username}:${remote-passwd}@${remote-addr}${service-path}]]></url>
          <commands>
            <!-- Kill Old Process -->
            <command>pkill -f ${pack-name}</command>
            <command>rm -f ${service-path}/renren.log</command>
            <!-- Restart jar package，write result into renren.log -->
            <command>
              <![CDATA[nohup java -jar ${service-path}/${pack-name} --spring.profiles.active=prod  > ${service-path}/lottery-admin.log 2>&1 & ]]></command>
            <command><![CDATA[netstat -nptl]]></command>
            <command><![CDATA[ps -ef | grep java | grep -v grep]]></command>
          </commands>
          <!-- 运行命令 mvn clean package wagon:upload-single wagon:sshexec-->
          <displayCommandOutputs>true</displayCommandOutputs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.4.14</version>
        <!--<executions>-->
        <!--<execution>-->
        <!--<phase>package</phase>-->
        <!--<goals>-->
        <!--<goal>build</goal>-->
        <!--</goals>-->
        <!--</execution>-->
        <!--</executions>-->
        <configuration>
          <imageName>teorange/lottery-admin</imageName>
          <dockerDirectory>${project.basedir}</dockerDirectory>
          <resources>
            <resource>
              <targetPath>/</targetPath>
              <directory>${project.build.directory}</directory>
              <include>${project.build.finalName}.jar</include>
            </resource>
          </resources>
        </configuration>
        <!-- 运行命令 mvn clean package docker:build 打包并生成docker镜像 -->
      </plugin>
    </plugins>
  </build>
</project>